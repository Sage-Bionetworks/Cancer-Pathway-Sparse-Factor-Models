zoo <- lapply(foo, 2, facParse)
zoo <- apply(foo, 2, facParse)
zoo[[1]]
zoo[15]
parseBFRM <- function(bfrmResult){
print('Loading Posterior Probabilities')
mPostPib <- bfrmResult@results$mPostPib
numFacs <- dim(mPostPib[2])
facParse <- function(x){
incFeatureLogical <- x > 0.99
incFeatureInd <- grep('TRUE', incFeatureLogical)
return(incFeatureInd)
}
facList <- apply(mPostPib[ , 2:numFacs], 2, facParse)
return(facList)
}
roo <- parseBFRM(gooFactor)
numFacs <- dim(gooFactor@results$mPostPib)
numFacs
parseBFRM <- function(bfrmResult){
print('Loading Posterior Probabilities')
mPostPib <- bfrmResult@results$mPostPib
numFacs <- dim(mPostPib)[2]
facParse <- function(x){
incFeatureLogical <- x > 0.99
incFeatureInd <- grep('TRUE', incFeatureLogical)
return(incFeatureInd)
}
facList <- apply(mPostPib[ , 2:numFacs], 2, facParse)
return(facList)
}
roo <- parseBFRM(gooFactor)
parseBFRM <- function(bfrmResult){
print('Loading Posterior Probabilities')
mPostPib <- bfrmResult@results$mPostPib
numFacs <- dim(mPostPib)[2]
facParse <- function(x){
incFeatureLogical <- x > 0.99
incFeatureInd <- grep('TRUE', incFeatureLogical)
return(incFeatureInd)
}
print('Creating list of Factors by Features with Posterior Probability > 0.99')
facList <- apply(mPostPib[ , 2:numFacs], 2, facParse)
return(facList)
}
roo <- parseBFRM(gooFactor)
roo[5]
ggheat2(dat2[roo$[5], ])
ggheat2(dat2[roo[5], ])
ggheat2(dat2[roo[[5]], ])
ggheat2(dat2[roo[[5]], ], clustering = 'both')
roo[[5]][1]
plot(dat2[roo[[5]][1], ]
)
plot(dat2[roo[[5]][10], ])
plot(dat2[roo[[5]][9], ])
plot(dat2[roo[[5]][12], ])
plot(dat2[roo[[5]][40], ])
plot(dat2[roo[[5]][22], ])
plot(dat2[roo[[5]][47], ])
projection
yoo <- projection(gooFactor, dat2)
image(yoo)
image(gooFactor@results$mF)
image(t(gooFactor@results$mF))
hoo <- cbind(gooFactor@results$mF, yoo)
hoo <- rbind(gooFactor@results$mF, yoo)
dim(yoo)
dim(gooFactor@results$mA)
dim(gooFactor@results$mF)
hoo <- rbind(gooFactor@results$mF, t(yoo))
hoo
dim(hoo)
doo <- cor(hoo)
doo <- cor(t(hoo))
image(doo)
doo[1,16]
str(roo)
plot(dat2[7, ])
plot(dat2[194, ])
plot(dat2[8, ])
plot(dat2[1396, ])
plot(dat2[3319, ])
str(gooFactor@model)
sessionInfo()
sparseFactorEnt <- loadEntity('syn317452')
require(synapseClient)
synapseLogin('erich.huang@sagebase.org', 'sagegagl1ano')
sparseFactorEnt <- loadEntity('syn317452')
bCatSparseANOVA <- goo
sparseFactorEnt <- addObject(sparseFactorEnt, bCatSparseANOVA)
sparseFactorEnt <- storeEntity(sparseFactorEnt)
sparseFactorEnt <- loadEntity('syn317454')
sparseFactorEnt <- addObject(sparseFactorEnt, bCatSparseANOVA)
sparseFactorEnt <- storeEntity(sparseFactorEnt)
evolveFactorEnt <- loadEntity('syn317456')
bCatEvolveFactor <- gooFactor
evolveFactorEnt <- addObject(evolveFactorEnt, bCatEvolveFactor)
evolveFactorEnt <- storeEntity(evolveFactorEnt)
q()
# e2f3QC.R
# Erich S. Huang
# Sage Bionetworks
# Seattle, Washington
# erich.huang@sagebase.org
##########
# LOAD IN REQUIRED LIBRARIES
##########
require(mGenomics)
require(snm)
require(ggplot2)
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
# synapseLogin('username', 'password')
##########
# LOAD IN DATA ENTITY
##########
e2f3Ent <- loadEntity('syn138509')
fits <- runWorkflow(e2f3Ent$cacheDir, workflow = 'snm')
exprDat <- exprs(fits$hgu133plus2[[1]])
# Create a treatment model matrix  (using the filename annotations)
treatment <- ifelse(grepl('E2F3', list.files(bCatEnt$cacheDir)), "GFP", "E2F3")
treatment <- ifelse(grepl('E2F3', list.files(e2f3Ent$cacheDir)), "GFP", "E2F3")
treatment
X <- model.matrix(~ factor(treatment))
sigObj <- calcSig(exprDat, X)
# Generate a histogram
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value distribution of transcripts\n') +
xlab('p values') +
ylab('E2F3 Effect on Gene Expression Variation')
histFig
svdObj <- fs(exprDat)
svdDF <- as.data.frame(cbind(1:19, svdObj$d, svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(eigenGene, percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each E2F3 Eigengene\n') +
xlab('Eigengene') +
ylab('Percent Variance Explained')
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Prenormalized E2F3 Eigengene 1 Loadings\n') +
xlab('Samples') +
ylab('Eigengene 1 Loadings')
eigenFig2 <- ggplot(svdDF, aes(eigenGene, prinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Prenormalized E2F3 Eigengene 2 Loadings\n') +
xlab('Samples') +
ylab('Eigengene 2 Loadings')
multiplot(barFig, eigenFig1, eigenFig2, cols = 2)
##########
# REGRESS OUT THE KNOWN EXPERIMENTAL PERTURBATION EFFECT (TREATMENT)
##########
# In order to better understand perturbation-independent latent structure in
# the data
# Calculate the total sums of squares of the data.
datM <- rowMeans(exprDat)
datC <- sweep(exprDat, 1, datM)
tSSQ_dat <- sum(datC^2)
# Now we want to remove the effects of the biological treatment
# on the data.  The reason is we are interested in identifying
# any latent structure. In order to do so we calcualte the
# residual sums of squares and take a singular value decomposition
# of the data.  Note the singular values are weighted to sum to 1.
residuals <- exprDat - t(X %*% solve(t(X) %*% X) %*% t(X) %*% t(exprDat))
rSSQ_dat <- sum(residuals^2)
u <- fs(residuals)
propSSQ <- round(rSSQ_dat * u$d,3) / tSSQ_dat
propSSQDF <- as.data.frame(cbind(1:19, propSSQ))
colnames(propSSQDF) <- c('eigenGene', 'propTSSQ')
propSSQFig <- ggplot(propSSQDF, aes(eigenGene, propSSQ)) +
geom_bar(stat = 'identity') +
opts(title = 'Proportion of total SSQ Explained by Each E2F3 Eigengene\n') +
xlab('Eigengene') +
ylab('Proportion of total Sum of Squares Explained')
propSSQFig
# Visual inspection of this figure suggests that the dependence kernel
# should be set as rank 4
svaFit <- sva(exprDat, bio.var = X, n.sv = 4, num.iter = 30, diagnose = FALSE)
svaFit <- sva(exprDat, bio.var = X, n.sv = 2, num.iter = 30, diagnose = FALSE)
# Now, we'll take a look at the estimated basis vectors
svaDF <- as.data.frame(cbind(1:19, svaFit$svd[[30]]$v))
colnames(svaDF) <- c('sample', paste('adjPrinComp', 1:4, sep = ''))
colnames(svaDF) <- c('sample', paste('adjPrinComp', 1:2, sep = ''))
adjSVDFig1 <- ggplot(svaDF, aes(sample, adjPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment "Depleted" E2F3 Eigengene 1 Loadings\n') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig2 <- ggplot(svaDF, aes(sample, adjPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment "Depleted" E2F3 Eigengene 2 Loadings\n') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig3 <- ggplot(svaDF, aes(sample, adjPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment "Depleted" E2F3 Eigengene 3 Loadings\n') +
xlab('Sample') +
ylab('Eigengene 3 Loading')
adjSVDFig4 <- ggplot(svaDF, aes(sample, adjPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment "Depleted" E2F3 Eigengene 4 Loadings\n') +
xlab('Sample') +
ylab('Eigengene 4 Loading')
adjCompositeFig <- multiplot(adjSVDFig1,
adjSVDFig2,
adjSVDFig3,
adjSVDFig4, cols = 2)
adjCompositeFig <- multiplot(adjSVDFig1,
adjSVDFig2,
cols = 2)
nullProbes <- which(rank(1 - sigObj$pval) < (length(sigObj$pval) * sigObj$pi0))
u <- fs(exprDat[nullProbes,])
Z <- model.matrix(~ u$v[,1:4])
# Use the null probes to build a dependence kernel and renormalize the data
fits2 <- runWorkflow(bCatEnt$cacheDir,
workflow = "snm", bio.var = X, adj.var = Z, rm.adj = TRUE)
fits2 <- runWorkflow(e2f3Ent$cacheDir,
workflow = "snm", bio.var = X, adj.var = Z, rm.adj = TRUE)
normDF <- as.data.frame(cbind(1:19, u2$v))
colnames(normDF) <- c('samples', paste('normPrinComp', 1:19, sep = ''))
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 1\n') +
xlab('Samples') +
ylab('Eigengene 1 Loading')
normFig2 <- ggplot(normDF, aes(samples, normPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 2\n') +
xlab('Samples') +
ylab('Eigengene 2 Loading')
normFig3 <- ggplot(normDF, aes(samples, normPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 3\n') +
xlab('Samples') +
ylab('Eigengene 3 Loading')
normFig4 <- ggplot(normDF, aes(samples, normPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 4\n') +
xlab('Samples') +
ylab('Eigengene 4 Loading')
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
##########
dat2 <- exprs(fits2$hgu133plus2[[1]])
u2 <- fs(dat2)
# Visualize the normalized data
normDF <- as.data.frame(cbind(1:19, u2$v))
colnames(normDF) <- c('samples', paste('normPrinComp', 1:19, sep = ''))
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 1\n') +
xlab('Samples') +
ylab('Eigengene 1 Loading')
normFig2 <- ggplot(normDF, aes(samples, normPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 2\n') +
xlab('Samples') +
ylab('Eigengene 2 Loading')
normFig3 <- ggplot(normDF, aes(samples, normPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 3\n') +
xlab('Samples') +
ylab('Eigengene 3 Loading')
normFig4 <- ggplot(normDF, aes(samples, normPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 4\n') +
xlab('Samples') +
ylab('Eigengene 4 Loading')
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
qplot(u2$d, geometry = 'histogram')
hist(u2$d)
barplot(u2$d)
barplot(u$df)
barplot(u$d)
foo <- char('foo')
?character
foo <- character('foo')
foo <- 'foo'
class(foo)
paste(foo, 'fighter', sep = '')
deparse(substitute(histFig))
deparse(substitute(fits))
?gsub
list.files(e2f3Ent$cacheDir)
rm(list = ls())
require(mGenomics)
require(snm)
require(ggplot2)
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
synapseLogin('erich.huang@sagebase.org', sagegagl1ano'')
synapseLogin('erich.huang@sagebase.org', 'sagegagl1ano')
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
e2f3Ent <- loadEntity('syn138509')
fits <- runWorkflow(e2f3Ent$cacheDir, workflow = 'snm')
##########
# PULL OUT THE EXPRESSION DATA
##########
exprDat <- exprs(fits$hgu133plus2[[1]])
# Create a treatment model matrix  (using the filename annotations)
treatment <- ifelse(grepl('E2F3', list.files(e2f3Ent$cacheDir)), "GFP", "E2F3")
X <- model.matrix(~ factor(treatment))
sigObj <- calcSig(exprDat, X)
# Generate a histogram
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value distribution of transcripts\n') +
xlab('p values') +
ylab('E2F3 Effect on Gene Expression Variation')
histFig
q()
require(mGenomics)
require(snm)
require(ggplot2)
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
bCatEnt <- loadEntity('syn138507')
fits <- runWorkflow(bCatEnt$cacheDir, workflow = 'snm')
require(synapseClient)
pi3kEnt <- loadEntity('syn317781')
pi3KExpr <- pi3kEnt$objects$eset
colnames(pi3KExpr)
pi3kEnt
pi3KExpr
pi3kSVD <- princomp(exprs(pi3KExpr))
require(Biobase)
pi3kSVD <- princomp(exprs(pi3KExpr))
pi3kSVD$loadings
plot(pi3kSVD$loadings[ ,1])
plot(pi3kSVD$loadings[ , 2])
plot(pi3kSVD$loadings[ , 3])
rm(list = ls())
require(mGenomics)
require(snm)
require(ggplot2)
require(Biobase)
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
e2f3Ent <- loadEntity('syn138509')
e2f3Ent$properties
fits <- runWorkflow(e2f3Ent$cacheDir, workflow = 'snm')
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value Distribution of Transcripts\n') +
xlab('p Values') +
ylab('E2F3 Effect on Gene Expression Variation')
histFig
exprDat <- exprs(fits$hgu133plus2[[1]])
# Create a treatment model matrix  (using the filename annotations)
treatment <- ifelse(grepl('E2F3', list.files(e2f3Ent$cacheDir)), "GFP", "E2F3")
X <- model.matrix(~ factor(treatment))
sigObj <- calcSig(exprDat, X)
# Generate a histogram
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value Distribution of Transcripts\n') +
xlab('p Values') +
ylab('E2F3 Effect on Gene Expression Variation')
histFig
# Generate a histogram
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value Distribution of Transcripts\n') +
xlab('\np Values') +
ylab('E2F3 Effect on Gene Expression Variation\n')
histFig
# Take an SVD of the data. Look at eigenweights and first couple of eigengenes
svdObj <- fs(exprDat)
svdDF <- as.data.frame(cbind(1:19, svdObj$d, svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(eigenGene, percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each E2F3 Eigengene\n') +
xlab('\nEigengene') +
ylab('Percent Variance Explained\n')
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Prenormalized E2F3 Eigengene 1 Loadings\n') +
xlab('Samples') +
ylab('Eigengene 1 Loadings')
eigenFig2 <- ggplot(svdDF, aes(eigenGene, prinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Prenormalized E2F3 Eigengene 2 Loadings\n') +
xlab('Samples') +
ylab('Eigengene 2 Loadings')
multiplot(barFig, eigenFig1, eigenFig2, cols = 2)
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Prenormalized E2F3 Eigengene 1 Loadings\n') +
xlab('\nSamples') +
ylab('Eigengene 1 Loadings\n')
eigenFig2 <- ggplot(svdDF, aes(eigenGene, prinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Prenormalized E2F3 Eigengene 2 Loadings\n') +
xlab('\nSamples') +
ylab('Eigengene 2 Loadings\n')
multiplot(barFig, eigenFig1, eigenFig2, cols = 2)
# Calculate the total sums of squares of the data.
datM <- rowMeans(exprDat)
datC <- sweep(exprDat, 1, datM)
tSSQ_dat <- sum(datC^2)
residuals <- exprDat - t(X %*% solve(t(X) %*% X) %*% t(X) %*% t(exprDat))
rSSQ_dat <- sum(residuals^2)
u <- fs(residuals)
propSSQ <- round(rSSQ_dat * u$d,3) / tSSQ_dat
propSSQDF <- as.data.frame(cbind(1:19, propSSQ))
colnames(propSSQDF) <- c('eigenGene', 'propTSSQ')
propSSQFig <- ggplot(propSSQDF, aes(eigenGene, propSSQ)) +
geom_bar(stat = 'identity') +
opts(title = 'Proportion of total SSQ Explained by Each E2F3 Eigengene\n') +
xlab('\nEigengene') +
ylab('Proportion of total Sum of Squares Explained\n')
propSSQFig
svaFit <- sva(exprDat, bio.var = X, n.sv = 2, num.iter = 30, diagnose = FALSE)
svaDF <- as.data.frame(cbind(1:19, svaFit$svd[[30]]$v))
colnames(svaDF) <- c('sample', paste('adjPrinComp', 1:2, sep = ''))
adjSVDFig1 <- ggplot(svaDF, aes(sample, adjPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment "Depleted" E2F3 Eigengene 1 Loadings\n') +
xlab('\nSample') +
ylab('Eigengene 1 Loading\n')
adjSVDFig2 <- ggplot(svaDF, aes(sample, adjPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment "Depleted" E2F3 Eigengene 2 Loadings\n') +
xlab('\nSample') +
ylab('Eigengene 2 Loading\n')
adjCompositeFig <- multiplot(adjSVDFig1,
adjSVDFig2,
cols = 2)
nullProbes <- which(rank(1 - sigObj$pval) < (length(sigObj$pval) * sigObj$pi0))
u <- fs(exprDat[nullProbes,])
Z <- model.matrix(~ u$v[,1:4])
# Use the null probes to build a dependence kernel and renormalize the data
fits2 <- runWorkflow(e2f3Ent$cacheDir,
workflow = "snm", bio.var = X, adj.var = Z, rm.adj = TRUE)
dat2 <- exprs(fits2$hgu133plus2[[1]])
u2 <- fs(dat2)
# Visualize the normalized data
normDF <- as.data.frame(cbind(1:19, u2$v))
colnames(normDF) <- c('samples', paste('normPrinComp', 1:19, sep = ''))
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 1\n') +
xlab('/nSamples') +
ylab('Eigengene 1 Loading/n')
normFig2 <- ggplot(normDF, aes(samples, normPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 2\n') +
xlab('/nSamples') +
ylab('Eigengene 2 Loading/n')
normFig3 <- ggplot(normDF, aes(samples, normPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 3\n') +
xlab('/nSamples') +
ylab('Eigengene 3 Loading/n')
normFig4 <- ggplot(normDF, aes(samples, normPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: E2F3 Eigengene 4\n') +
xlab('/nSamples') +
ylab('Eigengene 4 Loading/n')
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
?Folder
foo <- Folder(list(name = 'fooFolder', parentId = 'syn162408'))
foo <- createEntity(foo)
require(synapseClient)
synapseLogin('erich.huang@sagebase.org', 'sagegagl1ano')
foo <- createEntity(foo)
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
q()
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
edit(mplotEnt)
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/helperFunctions/generateFigures.R')
require(mGenomics)
require(snm)
require(ggplot2)
BiocLite("oligo")
biocLite("oligo")
install.packages("httr")
install.packages("whisker")
install.packages("devtools")
require(devtools)
?devtools
?install_github
install_github('mGenomics')
install_github('https://github.com/Sage-Bionetworks/mGenomics.git')
install_github('https://github.com/Sage-Bionetworks/mGenomics')
install_github
install_github('https://github.com/Sage-Bionetworks/mGenomics', 'Sage-Bionetworks')
install_github('mGenomics', 'Sage-Bionetworks')
require(mGenomics)
require(snm)
require(ggplot2)
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
e2f3Ent <- loadEntity('syn138509')
fits <- runWorkflow(e2f3Ent$cacheDir, workflow = 'snm')
##########
# PULL OUT THE EXPRESSION DATA
##########
exprDat <- exprs(fits$hgu133plus2[[1]])
# Create a treatment model matrix  (using the filename annotations)
treatment <- ifelse(grepl('E2F3', list.files(e2f3Ent$cacheDir)), "GFP", "E2F3")
X <- model.matrix(~ factor(treatment))
sigObj <- calcSig(exprDat, X)
install_github('snm', 'Sage-Bionetworks')
q()
