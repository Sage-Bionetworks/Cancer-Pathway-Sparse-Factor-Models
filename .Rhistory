xlab('Eigengene') +
ylab('Percent Variance Explained')
barFig
svdDF <- as.data.frame(cbind(svdObj$d, svdObj$v))
colnames(svdDF) <- c('percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(percentVariance)) +
geom_point() +
opts(title = 'Percent Variance Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Percent Variance Explained')
barFig
svdDF
plot(svdDF$percentVariance)
qplot(svdDF$percentVariance, geometry = 'point')
barFig <- ggplot(svdDF, aes(percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Percent Variance Explained')
barFig
svdDF <- as.data.frame(cbind(1:19, svdObj$d, svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(eigenGene, percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Percent Variance Explained')
barFig
eigenFig <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point() +
opts(title = 'Eigengene loadings by Sample') +
xlab('Samples') +
ylab('Eigengene Loadings')
eigenFig
eigenFig <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene loadings by Sample') +
xlab('Samples') +
ylab('Eigengene Loadings')
eigenFig
foo <- -1*svdObj$v
image(foo)
image(svdObj$v)
svdDF <- as.data.frame(cbind(1:19, svdObj$d, -1*svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
eigenFig <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene loadings by Sample') +
xlab('Samples') +
ylab('Eigengene Loadings')
eigenFig
eigenFig <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 1 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 1 Loadings')
eigenFig
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 1 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 1 Loadings')
eigenFig2 <- ggplot(svdDF, aes(eigenGene, prinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 2 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 2 Loadings')
eigenFig2
?sweep
q()
# betaCateninQC.R
# Erich S. Huang
# Sage Bionetworks
# Seattle, Washington
# erich.huang@sagebase.org
#####
# LOAD IN REQUIRED LIBRARIES
#####
require(mGenomics)
require(snm)
require(ggplot2)
require(synapseClient)
# synapseLogin('username', 'password')
#####
# LOAD IN DATA ENTITY
#####
bCatEnt <- loadEntity('syn138507')
fits <- runWorkflow(bCatEnt$cacheDir, workflow = 'snm')
#####
# PULL OUT THE EXPRESSION DATA
####
exprDat <- exprs(fits$hgu133a2[[1]])
# Create a treatment model matrix  (using the filename annotations)
treatment <- ifelse(grepl('bcat', list.files(bCatEnt$cacheDir)), "bCAT", "GFP")
X <- model.matrix(~ factor(treatment))
sigObj <- calcSig(exprDat, X)
# Generate a histogram
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value distribution of transcripts') +
xlab('p values') +
ylab('Beta Catenin Effect on Gene Expression Variation')
# Take an SVD of the data. Look at eigenweights and first couple of eigengenes
svdObj <- fs(exprDat)
svdDF <- as.data.frame(cbind(1:19, svdObj$d, -1*svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(eigenGene, percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Percent Variance Explained')
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 1 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 1 Loadings')
eigenFig2 <- ggplot(svdDF, aes(eigenGene, prinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 2 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 2 Loadings')
eigenFig2
datM <- rowMeans(dat)
datC <- sweep(dat, 1, datM)
tSSQ_dat <- sum(datC^2)
datM <- rowMeans(exprDat)
datC <- sweep(exprDat, 1, datM)
tSSQ_dat <- sum(datC^2)
residuals <- exprDat - t(X %*% solve(t(X) %*% X) %*% t(X) %*% t(dat))
residuals <- exprDat - t(X %*% solve(t(X) %*% X) %*% t(X) %*% t(exprDat))
rSSQ_dat <- sum(residuals^2)
u <- fs(residuals)
barplot(round(rSSQ_dat * u$d,3) / tSSQ_dat, ylab="Prop tSSQ Explained by Each Eigengene")
?round
round(rSSQ_dat * u$d,3)
round(rSSQ_dat * u$d,3) / tSSQ_dat
sum(round(rSSQ_dat * u$d,3) / tSSQ_dat)
colnames(propSSQDF) <- c('eigenGene', 'propTSSQ')
propSSQDF <- as.data.frame(cbind(1:19, propSSQ))
propSSQ <- round(rSSQ_dat * u$d,3) / tSSQ_dat
propSSQDF <- as.data.frame(cbind(1:19, propSSQ))
colnames(propSSQDF) <- c('eigenGene', 'propTSSQ')
propSSQFig <- ggplot(propSSQDF, aes(propTSSQ, eigenGene)) +
geom_bar(stat = 'identity') +
opts(title = 'Proportion of total SSQ Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Proportion of total Sum of Squares Explained')
propSSQFig
propSSQFig <- ggplot(propSSQDF, aes(eigenGene, propSSQ)) +
geom_bar(stat = 'identity') +
opts(title = 'Proportion of total SSQ Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Proportion of total Sum of Squares Explained')
propSSQFig
sva.fit <- sva(exprDat, bio.var = X, n.sv = 4, num.iter = 30, diagnose = FALSE)
plot(sva.fit$svd[[30]]$v[,1])
treatment
plot(sva.fit$svd[[30]]$v[,2])
plot(sva.fit$svd[[30]]$v[,3])
plot(sva.fit$svd[[30]]$v[,4])
svaFit <- sva(exprDat, bio.var = X, n.sv = 4, num.iter = 30, diagnose = FALSE)
svaDF <- as.data.frame(cbind(1:19, svaFit$svd[[30]]))
svaDF <- as.data.frame(cbind(1:19, svaFit$svd[[30]]$v))
colnames(svaDF) <- c('eigenGene', paste('adjPrinComp', 1:19, sep = ''))
colnames(svaDF) <- c('eigenGene', paste('adjPrinComp', 1:4, sep = ''))
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
mplotEnt
edit(multiplot)
colnames(svaDF) <- c('sample', paste('adjPrinComp', 1:4, sep = ''))
adjSVDFig1 <- ggplot(svaDF, aes(sample, adjPrinComp1)) +
geom_bar(stat = 'identity') +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig1
adjSVDFig1 <- ggplot(svaDF, aes(sample, adjPrinComp1)) +
geom_point(aes(factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig1
adjSVDFig1 <- ggplot(svaDF, aes(sample, adjPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig1
adjSVDFig2 <- ggplot(svaDF, aes(sample, adjPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 2 Loadings') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig3 <- ggplot(svaDF, aes(sample, adjPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 3 Loading')
adjSVDFig4 <- ggplot(svaDF, aes(sample, adjPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 4 Loading')
adjCompositeFig <- multiplot(adjSVDFig1,
adjSVDFig2,
adjSVDFig3,
adjSVDFig4, col = 2)
plot(sva.fit$svd[[30]]$v[,1])
adjCompositeFig <- multiplot(adjSVDFig1,
adjSVDFig2,
adjSVDFig3,
adjSVDFig4, cols = 2)
# Get the null probes
nullProbes <- which(rank(1 - sigObj$pval) < (length(sigObj$pval) * sigObj$pi0))
u <- fs(exprDat[nullProbes,])
Z <- model.matrix(~ u$v[,1:4])
fits2 <- runWorkflow(bCatEnt$cacheDir,
workflow = "snm", bio.var = X, adj.var = Z, rm.adj = TRUE)
dat2 <- exprs(fits2$hgu133a2[[1]])
sig2 <- calcSig(dat2, X, Z)
par(mfrow=c(1,2))
hist(sig2$pval)
u2 <- fs(dat2)
barplot(u2$d, ylab="Prop Variance Explained by Each Eigengene")
plot(u2$v[,1], xlab="Samples",ylab="Eigengene 1")
par(mfrow = c(1,1))
normDF <- as.data.frame(cbind(1:19, u2$v))
colnames(normDF) <- c('samples', paste('normPrinComp', 1:19, sep = ''))
geom_point(aes(colour = factor(treatment)))
normFig <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment)))
normFig
q()
require(mGenomics)
require(snm)
require(ggplot2)
require(synapseClient)
mplotEnt <- loadEntity('syn274067')
attach(mplotEnt)
# synapseLogin('username', 'password')
##########
# LOAD IN DATA ENTITY
##########
bCatEnt <- loadEntity('syn138507')
fits <- runWorkflow(bCatEnt$cacheDir, workflow = 'snm')
exprDat <- exprs(fits$hgu133a2[[1]])
# Create a treatment model matrix  (using the filename annotations)
treatment <- ifelse(grepl('bcat', list.files(bCatEnt$cacheDir)), "bCAT", "GFP")
X <- model.matrix(~ factor(treatment))
sigObj <- calcSig(exprDat, X)
# Generate a histogram
histFig <- qplot(sigObj$pval, geom = 'histogram') +
opts(title = 'P value distribution of transcripts') +
xlab('p values') +
ylab('Beta Catenin Effect on Gene Expression Variation')
return(histFig)
histFig
# Take an SVD of the data. Look at eigenweights and first couple of eigengenes
svdObj <- fs(exprDat)
svdDF <- as.data.frame(cbind(1:19, svdObj$d, -1*svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(eigenGene, percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Percent Variance Explained')
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 1 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 1 Loadings')
eigenFig2 <- ggplot(svdDF, aes(eigenGene, prinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Eigengene 2 loadings by Sample') +
xlab('Samples') +
ylab('Eigengene 2 Loadings')
multiplot(barFig, eigenFig1, eigenFig2, cols = 2)
##########
# REGRESS OUT THE KNOWN EXPERIMENTAL PERTURBATION EFFECT (TREATMENT)
##########
# In order to better understand perturbation-independent latent structure in
# the data
# Calculate the total sums of squares of the data.
datM <- rowMeans(exprDat)
datC <- sweep(exprDat, 1, datM)
tSSQ_dat <- sum(datC^2)
# Now we want to remove the effects of the biological treatment
# on the data.  The reason is we are interested in identifying
# any latent structure. In order to do so we calcualte the
# residual sums of squares and take a singular value decomposition
# of the data.  Note the singular values are weighted to sum to 1.
residuals <- exprDat - t(X %*% solve(t(X) %*% X) %*% t(X) %*% t(exprDat))
rSSQ_dat <- sum(residuals^2)
u <- fs(residuals)
propSSQ <- round(rSSQ_dat * u$d,3) / tSSQ_dat
propSSQDF <- as.data.frame(cbind(1:19, propSSQ))
colnames(propSSQDF) <- c('eigenGene', 'propTSSQ')
propSSQFig <- ggplot(propSSQDF, aes(eigenGene, propSSQ)) +
geom_bar(stat = 'identity') +
opts(title = 'Proportion of total SSQ Explained by Each Eigengene') +
xlab('Eigengene') +
ylab('Proportion of total Sum of Squares Explained')
propSSQFig
# Visual inspection of this figure suggests that the dependence kernel
# should be set as rank 4
svaFit <- sva(exprDat, bio.var = X, n.sv = 4, num.iter = 30, diagnose = FALSE)
# Now, we'll take a look at the estimated basis vectors
svaDF <- as.data.frame(cbind(1:19, svaFit$svd[[30]]$v))
colnames(svaDF) <- c('sample', paste('adjPrinComp', 1:4, sep = ''))
adjSVDFig1 <- ggplot(svaDF, aes(sample, adjPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig2 <- ggplot(svaDF, aes(sample, adjPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 2 Loadings') +
xlab('Sample') +
ylab('Eigengene 1 Loading')
adjSVDFig3 <- ggplot(svaDF, aes(sample, adjPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 3 Loading')
adjSVDFig4 <- ggplot(svaDF, aes(sample, adjPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Treatment Adjusted Eigengene 1 Loadings') +
xlab('Sample') +
ylab('Eigengene 4 Loading')
adjCompositeFig <- multiplot(adjSVDFig1,
adjSVDFig2,
adjSVDFig3,
adjSVDFig4, cols = 2)
nullProbes <- which(rank(1 - sigObj$pval) < (length(sigObj$pval) * sigObj$pi0))
u <- fs(exprDat[nullProbes,])
Z <- model.matrix(~ u$v[,1:4])
fits2 <- runWorkflow(bCatEnt$cacheDir,
workflow = "snm", bio.var = X, adj.var = Z, rm.adj = TRUE)
dat2 <- exprs(fits2$hgu133a2[[1]])
u2 <- fs(dat2)
normDF <- as.data.frame(cbind(1:19, u2$v))
colnames(normDF) <- c('samples', paste('normPrinComp', 1:19, sep = ''))
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 1') +
xlab('Samples') +
ylab('Eigengene 1 Loading')
normFig1
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
normFig2 <- ggplot(normDF, aes(samples, normPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 2') +
xlab('Samples') +
ylab('Eigengene 2 Loading')
normFig3 <- ggplot(normDF, aes(samples, normPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 3') +
xlab('Samples') +
ylab('Eigengene 3 Loading')
normFig4 <- ggplot(normDF, aes(samples, normPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 4') +
xlab('Samples') +
ylab('Eigengene 4 Loading')
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 1') +
xlab('Samples') +
ylab('Eigengene 1 Loading')
normFig2 <- ggplot(normDF, aes(samples, normPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 2\n') +
xlab('Samples') +
ylab('Eigengene 2 Loading')
normFig3 <- ggplot(normDF, aes(samples, normPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 3\n') +
xlab('Samples') +
ylab('Eigengene 3 Loading')
normFig4 <- ggplot(normDF, aes(samples, normPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 4\n') +
xlab('Samples') +
ylab('Eigengene 4 Loading')
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 1\n') +
xlab('Samples') +
ylab('Eigengene 1 Loading')
normFig2 <- ggplot(normDF, aes(samples, normPrinComp2)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 2\n') +
xlab('Samples') +
ylab('Eigengene 2 Loading')
normFig3 <- ggplot(normDF, aes(samples, normPrinComp3)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 3\n') +
xlab('Samples') +
ylab('Eigengene 3 Loading')
normFig4 <- ggplot(normDF, aes(samples, normPrinComp4)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: Eigengene 4\n') +
xlab('Samples') +
ylab('Eigengene 4 Loading')
multiplot(normFig1, normFig2, normFig3, normFig4, cols = 2)
sessionInfo()
?runif
image(datC)
image(dat2)
head(rownames(dat2))
head(colnames(dat2))
?new
foo <- new('ExpressionSet')
str(foo)
exprs(foo) <- fits2
require(Biobase)
exprs(foo) <- fits2
exprs(foo)
exprs(foo) <- fits2$hgu133a2
zoo <- fits2$hgu133a2
class(zoo)
foo1 <- zoo$eset
str(foo1)
phenoData(foo1)
foo1@phenoData@varMetadata
phenoData(foo1) <- treatment
treatment
pData(foo1)
tmpPhen <- pData(foo1)
tmpPhen
tmpPhe$treatment <- treatment
tmpPhen$treatment <- treatment
pData(foo1) <- tmpPhen
pData(foo1)
nBCatEset <- fits2$hgu133a2$eset
tempPhen$treatment <- treatment
pData(nBCatEset) <- tempPhen
tempPhen <- pData(nBCatEset)
tempPhen$treatment <- treatment
pData(nBCatEset) <- tempPhen
str(nBCatEset)
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'bcatEigengene 1 loadings by Sample\n') +
xlab('Samples') +
ylab('bcatEigengene 1 Loadings')
multiplot(eigenFig1, normFig1, cols = 2)
normFig1
normFig1 <- ggplot(normDF, aes(samples, normPrinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'Normalized Data: bcatEigengene 1\n') +
xlab('Samples') +
ylab('bcatEigengene 1 Loading')
normFig1
normFig1
multiplot(eigenFig1, normFig1, cols = 2)
svdDF <- as.data.frame(cbind(1:19, svdObj$d, svdObj$v))
colnames(svdDF) <- c('eigenGene', 'percentVariance',
paste('prinComp', 1:19, sep = ''))
barFig <- ggplot(svdDF, aes(eigenGene, percentVariance)) +
geom_bar(stat = 'identity') +
opts(title = 'Percent Variance Explained by Each bcatEigengene\n') +
xlab('bcatEigengene') +
ylab('Percent Variance Explained')
eigenFig1 <- ggplot(svdDF, aes(eigenGene, prinComp1)) +
geom_point(aes(colour = factor(treatment))) +
opts(title = 'bcatEigengene 1 loadings by Sample\n') +
xlab('Samples') +
ylab('bcatEigengene 1 Loadings')
multiplot(eigenFig1, normFig1, cols = 2)
?ifelse
ifelse(grep('bCat', treatment), 1, 0)
ifelse(treatment == 'bCat', 1, 0)
treatment
ifelse(treatment == 'bCAT', 1, 0)
rep(1, 19)
hFoo <- rbind(rep(1,19), ifelse(treatment == 'bCAT', 1, 0))
hFoo
hFoo <- cbind(rep(1,19), ifelse(treatment == 'bCAT', 1, 0))
hFoo
require(bfrm)
goo <- bfrm(dat2, design = ifelse(treatment == 'bCAT', 1, 0))
mPPib <- goo@results$mPostPib
topProbeLogical <- mPPib[ , 2] >= 0.99
topProbeInd <- grep("TRUE", topProbeLogical)
head(topPribeInd)
head(topProbeInd)
heatmap(dat2[topProbeInd, ])
ggheatEnt <- loadEntity('syn274063')
attach(ggheatEnt)
ggheat2(dat2[topProbeInd, ])
ggheat2(dat2[topProbeInd, ], clustering = 'both')
?sample
ggheat2(dat2[sample(topProbeInd, 50), ], clustering = 'both')
ggheat2(dat2[sample(topProbeInd, 20), ], clustering = 'both')
heatPlot <- ggheat2(dat2[sample(topProbeInd, 20), ], clustering = 'both')
heatPlot + scale_fill_continuous('blue', 'red')
?scale_fill_continuous
heatPlot + scale_fill_continuous(low = 'blue', high = 'red')
heatPlot + scale_fill_continuous(low = 'red', high = 'yellow')
str(heatPlot)
max(heatPlot$data$value)
heatPlot + scale_fill_continuous(low = 'red', high = 'yellow', limits = c(0, 9))
min(heatPlot$data$value)
heatPlot + scale_fill_continuous(low = 'red', high = 'yellow', limits = c(5, 9))
q()
