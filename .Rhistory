fit$fitted.values
fit$residuals
require(corpcor)
install.packages("corpcor")
v <- fast.svd(bCatMat)
require(corpcor)
v <- fast.svd(bCatMat)
svdObj <- fast.svd(bCatMat)
plot(svdObj$v[,1], svdObj$v[,2])
outliers <- outlierTest(lm(svdObj$v[ , 1] ~ 1), n.max = 19)
outliers
outlierObj <- outlierTest(lm(svdObj$v[ , 1] ~ 1), n.max = 19)
outlierObj$bonf.p
plot(svdObj$v[,3], svdObj$v[,4])
outlierObj3 <- outlierTest(lm(svdObj$v[ , 3] ~ 1), n.max = 19)
outlierObj3
outlierObj2 <- outlierTest(lm(svdObj$v[ , 2] ~ 1), n.max = 19)
outlierObj2
outlierObj9 <- outlierTest(lm(svdObj$v[ , 9] ~ 1), n.max = 19)
outlierObj9
plot(svdObj$v[,1])
plot(svdObj$v[,2])
plot(svdObj$v[,3])
plot(svdObj$v[,4])
plot(svdObj$v[,5])
plot(svdObj$v[,6])
plot(svdObj$v[,7])
plot(svdObj$v[,8])
plot(svdObj$v[,9])
plot(svdObj$v[,10])
plot(svdObj$v[,11])
plot(svdObj$v[,12])
plot(svdObj$v[,13])
plot(svdObj$v[,14])
plot(svdObj$v[,15])
plot(svdObj$v[,16])
outlierObj
outlierObj2
outlierObj3
outlierObj4
outlierObj4 <- outlierTest(lm(svdObj$v[ , 4] ~ 1), n.max = 19)
outlierObj4
bCatEnt <- loadEntity('syn299161')
require(Biobase)
bCatEnt
require(synapseClient)
names(outlierObj)
outlierObj$signif
outlierObj3$signif
outlierObj3$cutoff
outlierObj3$bonf.p
str(outlierObj3$bonf.p)
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
snmOutlier(bCatEnt)
require(snm)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("snm")
source('~/.active-rstudio-document')
snmOutlier(bCatEnt)
sessionInfo()
source('~/.active-rstudio-document')
snmOutlier(bCatEnt)
edit(snmOutlier)
detach("package:snm")
source('~/.active-rstudio-document')
snmOutlier(bCatEnt)
detach("package:snm")
remove.packages("snm")
pkgInstall("snm")
edit(pkgInstall)
pkgInstall("snm")
library("snm")
remove.packages("snm")
edit(pkgInstall)
fix(pkgInstall)
fix(pkgInstall)
pkgInstall("snm")
snmOutlier(bCatEnt)
sessionInfo()
snmOutlier(bCatEnt)
source('~/.active-rstudio-document')
snmOutlier(bCatEnt)
snm
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
snmOutlier(bCatEnt)
snm(bCatMat, adj.var = model.matrix(~ bCatTx), rm.adj = T)
snm(bCatMat, bio.var = model.matrix(~ bCatTx), rm.adj = T)
snmObj <- snm(bCatMat, bio.var = model.matrix(~ bCatTx), rm.adj = T)
tmpMat <- snmObj$norm.dat
svdObj <- fs(tmpMat)
svdObj <- fast.svd(tmpMat)
plot(svdObj$v[ , 1])
plot(svdObj$v[ , 2])
plot(svdObj$v[ , 3])
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
testOut <- snmOutlier(bCatEnt)
testOut
names(outlierObj)
outlierObj$signif
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
testOut <- snmOutlier(bCatEnt)
testOut
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
testOut <- snmOutlier(bCatEnt)
testOut
testOut <- snm(bCatMat, adj.var = model.matrix(~ bCatTx), rm.adj = T)
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
synEnt <- bCatEnt
Z <- model.matrix(~ factor(synEnt$objects$treatment))
Y <- exprs(synEnt$objects$rmaEset)
tmpMat <- Y - t( Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% t(Y))
svdObj <- fast.svd(tmpMat)
plot(svdObj$v[,1])
plot(svdObj$v[,2])
plot(svdObj$d)
require(mGenomics)
source("http://depot.sagebase.org/CRAN.R")
pkgInstall("mGenomics")
svdObj <- fs(tmpMat)
require(mGenomics)
svdObj <- fs(tmpMat)
plot(svdObj$v[,1])
plot(svdObj$d)
plot(svdObj$v[,2])
plot(svdObj$v[,3])
plot(rowMeans(Y), svdObj$u[,1])
plot(rowMeans(Y), svdObj$u[,2])
plot(rowMeans(Y), svdObj$u[,3])
plot(rowMeans(Y), svdObj$u[,1])
mycEnt <- loadEntity('syn299167')
synEnt <- mycEnt
u.bcat <- svdObj
Z <- model.matrix(~ factor(synEnt$objects$treatment))
Y <- exprs(synEnt$objects$rmaEset)
tmpMat <- Y - t( Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% t(Y))
svdObj <- fs(tmpMat)
plot(svdObj$d)
plot(u.bcat$d)
plot(svdObj$d)
plot(svdObj$v[,1])
plot(rowMeans(Y), svdObj$u[,1])
synEnt$objects$rmaEset@protocolData
synEnt$objects$rmaEset@protocolData$ScanDate
synEnt$objects$rmaEset@protocolData@ScanDate
str(synEnt$objects$rmaEset@protocolData)
synEnt$objects$rmaEset@protocolData@data$ScanDate
plot(svdObj$v[,1])
ifelse(svdObj$v[,1] > 0.2, 1, 0)
newZ <- model.matrix(~ ifelse(svdObj$v[,1] > 0.2, 1, 0))
snm.fit <- snm(Y, bio.var=Z, adj.var=newZ, rm.adj=TRUE)
hist(snm.fit$pval)
snm.fit$pi0
sig <- calcSig(Y, Z)
library(snm)
sig <- calcSig(Y, Z)
sessionInfo()
u <- fs(Y)
plot(u$v[,1:2])
u2 <- fs(snm.fit$norm.dat)
plot(u2$v[,1:2])
plot(u2$d)
plot(u$d)
plot(u2$d)
?solve
%*%
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacsPipeline.R')
foo <- removeTreatment(bCatEnt)
foo
plot(foo$v[,1])
plot(foo$v[,2])
solve(t(Z) %*% Z)
t(Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% t(Y)
)
plot(foo$v[,1])
outlierObj <- outlierTest(lm(foo$v[,1]~1))
outlierObj$signif
outlierObj$bonf.p
outlierObj <- outlierTest(lm(foo$v[,2]~1))
outlierObj$bonf.p
outlierObj$signif
outlierObj <- outlierTest(lm(foo$v[,3]~1))
outlierObj$signif
plot(foo$v[,2])
plot(foo$v[,3])
plot(foo$v[,4])
outlierObj <- outlierTest(lm(foo$v[,4]~1))
outlierObj$signif
outlierObj <- removeTreatment(bCatEnt)
rm(list = ls())
bCatEnt <- loadEntity('syn299161')
bCatMat <- exprs(bCatEnt$objects$rmaEset)
bCatTx <- bCatEnt$objects$treatment
rm(list = ls())
bCatEnt <- loadEntity('syn299161')
## PULL IN THE CODE ENTITY WITH HELPER FUNCTIONS
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacFunctions.R')
svdObj <- removeTreatment(bCatEnt)
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacFunctions.R')
outlierPC1 <- findOutlier(svdObj, 1)
source('~/Projects/Cancer-Pathway-Sparse-Factor-Models/caPathFacFunctions.R')
outlierPC1 <- findOutlier(svdObj, 1)
outlierPC1$signif
outlierPC1
str(outlierPC1)
str(outlierPC1$rstudent)
outlierPC1$rstudent
names(outlierPC1$rstudent)
outlierPC2 <- findOutlier(svdObj, 2)                          )
outlierPC2 <- findOutlier(svdObj, 2)
names(outlierPC2$rstudent)
outlierPC3 <- findOutlier(svdObj, 3)
outlierPC3
as.numeric(names(outlierPC1$rstudent))
plot(svdObj$v[,1], svdOub$v[,2])
xyplot(svdObj$v[,1], svdOub$v[,2])
xyplot(svdObj$v[,1], svdObj$v[,2])
plot(svdObj$v[,1], svdObj$v[,2])
plot(svdObj$v[,2], svdObj$v[,3])
plot(svdObj$v[,2])
outlierPC1
outlierPC2
plot(svdObj$v[,1])
adjVar <- model.matrix( ~ ifelse(svdObj$v[ , 1] < -0.8, 1, 0))
adjVar
bcatFit <- snm(bCatEnt$objects$rmaEset,
bio.var = bcatEnt$objects$treatment,
adj.var = adjVar,
rm.adj = T)
bcatFit <- snm(bCatEnt$objects$rmaEset,
bio.var = bCatEnt$objects$treatment,
adj.var = adjVar,
rm.adj = T)
bcatFit <- snm(exprs(bCatEnt$objects$rmaEset),
bio.var = bCatEnt$objects$treatment,
adj.var = adjVar,
rm.adj = T)
bioVar <- model.matrix( ~ factor(bCatEnt$objects$treatment))
bioVar
bcatFit <- snm(exprs(bCatEnt$objects$rmaEset),
bio.var = bioVar,
adj.var = adjVar,
rm.adj = T)
newSvdObj <- fs(bcatFit$norm.dat)
plot(newSvdObj$v[,1])
origSvd <- fs(exprs(bCatEnt$objects$rmaEset))
plot(origSvd$v[,1])
bCatFit <- snm(exprs(bCatEnt$objects$rmaEset),
bio.var = bioVar,
adj.var = adjVar,
rm.adj = T)
Z <- model.matrix(~ factor(bCatEnt$objects$treatment))
Y <- bCatFit$norm.dat
tmpMat <- Y - t(Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% t(Y))
svdObjNew <- fs(tmpMat)
outlierPC1N <- findOutlier(svdObjNew, 1)
outlierPC1N
outlierPC2N <- findOutlier(svdObjNew, 2)
outlierPC2N
outlierPC3N <- findOutlier(svdObjNew, 3)
outlierPC3N
plot(svdObjNew$v[,1])
plot(svdObjNew$d)
plot(svdObj$d)
snmBCatEnt <- loadEntity('syn308414')
class(bCatFit$norm.dat)
?sapply
names(outlierPC1)
svdObj <- fs(tmpMat)
top3Axes <- svdObj$v[ , 1:3]
outlierLogical <- sapply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column) ~ 1)
return(outlierObj$signif)
})
outlierLogical <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column) ~ 1)
return(outlierObj$signif)
})
outlierLogical <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
return(outlierObj$signif)
})
outlierLogical
plot(top3Axes[,1])
plot(top3Axes[,2])
synEnt <- bCatEnt
Z <- model.matrix(~ factor(synEnt$objects$treatment))
Y <- exprs(synEnt$objects$rmaEset)
tmpMat <- Y - t(Z %*% solve(t(Z) %*% Z) %*% t(Z) %*% t(Y))
svdObj <- fs(tmpMat)
top3Axes <- svdObj$v[ , 1:3]
outlierLogical <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
return(outlierObj$signif)
})
print(outlierObj)
print(outlierLogical)
class(outlierLogical)
?grep
grep('TRUE', outlierLogical)
grep('TRUE', outlierLogical[2:3])
grep('FALSE', outlierLogical[2:3])
grep('FALSE', outlierLogical)
outlierPC1
names(outlierPC1$rstudent)
top3Axes <- svdObj$v[ , 1:3]
outlierSamples <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
if (outlierObj$signif == 'TRUE'){
outSamp <- names(outlierObj$rstudent)
} else {
outSamp <- 'NULL'
}
})
outlierSamples
as.vector(outlierSamples)
calss(outlierSamples)
class(outlierSamples)
as.numeric(outlierSanples)
as.numeric(outlierSamples)
eSet <- bCatEnt$objects$rmaEset
dim(eSet)
newEset <- eSet[ , -15]
dim(newEset)
pData(newEset)
outlierSamples > 0
outlierSamples <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
if (outlierObj$signif == 'TRUE'){
outSamp <- names(outlierObj$rstudent)
} else {
outSamp <- 'NULL'
}
outSamp
})
outlierSamples
outlierSamples <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
if (outlierObj$signif == 'TRUE'){
outSamp <- names(outlierObj$rstudent)
} else {
outSamp <- NA
}
outSamp
})
outlierSamples
which(1:ncol(expressMat) %in% na.omit(is.numeric(outlierSamples)))
expressMat <- exprs(rmaEset)
na.omit(as.numeric(outlierSamples))
str(newEset)
rm(list = ls())
q()
options(stringsAsFactors = F)
require(synapseClient)
require(affy)
require(corpcor)
require(car)
fs <-function (x){
u <- fast.svd(t(scale(t(x), scale = FALSE)), tol = 0)
u$d <- u$d^2/sum(u$d^2)
u
}
theseData <- synapseQuery('SELECT id, name FROM entity WHERE entity.parentId == "syn162399"')
theseData
res <- lapply(as.list(theseData$entity.id), function(x){
tmp <- downloadEntity(x)
tmpAB <- ReadAffy( celfile.path = tmp$cacheDir )
rmaEset <- rma(tmpAB, normalize=T, background=F)
treatment <- ifelse(grepl(annotValue(tmp, "treatmentString"),
tolower(sampleNames(rmaEset))), 1, 0)
tmpPhen <- pData(rmaEset)
tmpPhen$treatment <- treatment
pData(rmaEset) <- tmpPhen
## PLOTS CREATED AND STORED SUCH THAT CAN BE ATTACHED VIA WEB UI AS
## ATTACHMENTS ON YET SUPPORTED IN R CLIENT
myDir <- tempfile(pattern=strsplit(propertyValue(tmp, "name"), " ")[[1]][2],
tmpdir = path.expand("~/"), fileext="")
dir.create(myDir)
## TO IDENTIFY OUTLIERS, FIRST MODEL OUT TREATMENT EFFECTS
treatMM <- model.matrix(~ factor(treatment))
expressMat <- exprs(rmaEset)
tmpMat <- expressMat - t(treatMM %*% solve(t(treatMM) %*% treatMM) %*%
t(treatMM) %*% t(expressMat))
svdObj <- fs(tmpMat)
## THEN USE THE CAR PACKAGE outlierTest() TO ASSESS THE THREE FIRST PRINCIPAL
## AXES AND RETURN THE SAMPLES THAT ARE OUTLIERS
top3Axes <- svdObj$v[ , 1:3]
outlierSamples <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
if (outlierObj$signif == 'TRUE'){
outSamp <- names(outlierObj$rstudent)
} else {
outSamp <- NA
}
})
expressionset[ -na.omit(as.numeric(outlierSamples)) ]
#   tmpFit <- snm(exprs(rmaEset), adj.var=model.matrix(~factor(treatment)), rm.adj=T)
#   tmpMat <- tmpFit$norm.dat
#
#   u <- fs(tmpMat)
#   f1 <- file.path(myDir, "pctVar.png")
#   png(f1)
#   plot(u$d, main="percent variance explained after removing treatment variable", ylab="% variance explained")
#   dev.off()
#
#   f2 <- file.path(myDir, "svd1v2.png")
#   png(f2)
#   print(xyplot(u$v[, 1] ~ u$v[, 2], groups = treatment, main="svd after removing treatment variable", ylab="1st svd", xlab="2nd svd"))
#   dev.off()
#
#   tmpEnt <- ExpressionData(list(name=paste(propertyValue(tmp, "name"), "- RMA normalized"),
#                                 parentId="syn299160"))
#   tmpEnt <- createEntity(tmpEnt)
#   tmpEnt <- addObject(tmpEnt, rmaEset)
#   tmpEnt <- addObject(tmpEnt, treatment)
#   tmpEnt <- storeEntity(tmpEnt)
#   tmpEnt
})
theseData
x <- theseData[7:3]
x <- theseData[7:2]
theseData[7,2]
x <- theseData[7,2]
tmp <- downloadEntity(x)
tmpAB <- ReadAffy( celfile.path = tmp$cacheDir )
rmaEset <- rma(tmpAB, normalize=T, background=F)
treatment <- ifelse(grepl(annotValue(tmp, "treatmentString"),
tolower(sampleNames(rmaEset))), 1, 0)
tmpPhen <- pData(rmaEset)
tmpPhen$treatment <- treatment
pData(rmaEset) <- tmpPhen
treatMM <- model.matrix(~ factor(treatment))
expressMat <- exprs(rmaEset)
tmpMat <- expressMat - t(treatMM %*% solve(t(treatMM) %*% treatMM) %*%
t(treatMM) %*% t(expressMat))
svdObj <- fs(tmpMat)
## THEN USE THE CAR PACKAGE outlierTest() TO ASSESS THE THREE FIRST PRINCIPAL
## AXES AND RETURN THE SAMPLES THAT ARE OUTLIERS
top3Axes <- svdObj$v[ , 1:3]
outlierSamples <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
if (outlierObj$signif == 'TRUE'){
outSamp <- names(outlierObj$rstudent)
} else {
outSamp <- NA
}
})
outSamp
outlierSamples
na.omit(as.numeric(outlierSamples))
foo<- fs(expressMat)
foo
plot(foo$v[ ,1])
plot(svdObj$v[,1])
as.numeric(outlierSamples)
na.omit(as.numeric(outlierSamples))
goo <- na.omit(as.numeric(outlierSamples))
goo
rmaEset[ , -goo]
newRmaEset <- rmaEset[ , - goo]
dim(newRmaEset)
dim(rmaEset)
outlierSamples <- apply(top3Axes, 2, function(column){
outlierObj <- outlierTest(lm(column ~ 1))
if (outlierObj$signif == 'TRUE'){
outSamp <- names(outlierObj$rstudent)
} else {
outSamp <- 0
}
})
outlierSamples
goo <- outlierSamples
newRmaEset <- rmaEset[ , - goo]
dim(newRmaEset)
goo <- c(4, 6, 9)
goo
newRmaEset <- rmaEset[ , - goo]
dim(newRmaEset)
pData(rmaEset)
pData(newRmaEset)
propertyValue(tmp, 'name')
list(1, 2, 3, 4)
foo <- list(1, 2, 3, 4)
foo
foo[[1]] <- 'alpha'
foo
?list
names(foo)
foo <- ('a' = 1, 'b' = 2)
foo <- list('a' = 1, 'b' = 2)
foo
names(foo)
names(foo[[1]]) <- 'newname'
names(foo)
names(foo[1]) <- 'newname'
foo
foo <- list('a' = 1, 'b' = 2)
foo[[a]]
foo[a]
foo
foo$a
foo[[a]]
foo[1]
foo[[1]]
str(foo[1])
foo
names(foo) <- c("newA", "newB")
foo
theseData
names(foo) <- theseData[1:2, 1]
foo
rm(list = ls())
q()
